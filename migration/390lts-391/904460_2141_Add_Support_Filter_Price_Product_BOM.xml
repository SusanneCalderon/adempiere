<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Migrations>
  <Migration EntityType="D" Name="Add Support to Filter Price By Product BOM" ReleaseNo="3.9.1" SeqNo="904460">
    <Comments>https://github.com/adempiere/adempiere/issues/2141</Comments>
    <Step DBType="Postgres" Parse="N" SeqNo="10" StepType="SQL">
      <SQLStatement>CREATE OR REPLACE FUNCTION bompricelimit(p_product_id numeric, p_pricelist_version_id numeric, p_productbom_id numeric)
  RETURNS numeric AS
$BODY$
DECLARE
	v_Price		numeric;
	v_ProductPrice	numeric;
	bom		record;
BEGIN
	--	Try to get price from PriceList directly
	SELECT	COALESCE (SUM(PriceLimit), 0)
        INTO	v_Price
   	FROM	M_PRODUCTPRICE
	WHERE M_PriceList_Version_ID=p_PriceList_Version_ID AND M_Product_ID=p_Product_ID;
	IF (v_Price = 0) THEN
		FOR bom in SELECT bl.M_Product_ID AS M_ProductBOM_ID, 
			CASE WHEN bl.IsQtyPercentage = 'N' THEN bl.QtyBOM ELSE bl.QtyBatch / 100 END AS BomQty , p.IsBOM 
		FROM PP_PRODUCT_BOM b
		INNER JOIN M_PRODUCT p ON (p.M_Product_ID=b.M_Product_ID)
		INNER JOIN PP_PRODUCT_BOMLINE bl ON (bl.PP_Product_BOM_ID=b.PP_Product_BOM_ID)
		WHERE b.M_Product_ID = p_Product_ID
		AND ((b.PP_Product_BOM_ID = p_Productbom_ID AND p_Productbom_ID !=0) OR (p_Productbom_ID =0 AND b.IsDefault = 'Y'))
		LOOP
			v_ProductPrice := Bompricelimit (bom.M_ProductBOM_ID, p_PriceList_Version_ID);
			v_Price := v_Price + (bom.BOMQty * v_ProductPrice);
		END LOOP;
	END IF;
	--
	RETURN v_Price;
END;
$BODY$
  LANGUAGE 'plpgsql' ;</SQLStatement>
      <RollbackStatement>DROP FUNCTION bompricelimit(numeric, numeric, numeric);</RollbackStatement>
    </Step>
    <Step DBType="Postgres" Parse="N" SeqNo="20" StepType="SQL">
      <SQLStatement>CREATE OR REPLACE FUNCTION bompricelimit(p_product_id numeric, p_pricelist_version_id numeric)
  RETURNS numeric AS
$BODY$
BEGIN
	RETURN bompricelimit(p_product_id, p_pricelist_version_id, 0);
END;
$BODY$
  LANGUAGE 'plpgsql' ;</SQLStatement>
      <RollbackStatement>CREATE OR REPLACE FUNCTION bompricelimit(p_product_id numeric, p_pricelist_version_id numeric)
  RETURNS numeric AS
$BODY$
DECLARE
	v_Price		numeric;
	v_ProductPrice	numeric;
	bom		record;
BEGIN
	--	Try to get price from PriceList directly
	SELECT	COALESCE (SUM(PriceLimit), 0)
        INTO	v_Price
   	FROM	M_PRODUCTPRICE
	WHERE M_PriceList_Version_ID=p_PriceList_Version_ID AND M_Product_ID=p_Product_ID;
	IF (v_Price = 0) THEN
		FOR bom in SELECT bl.M_Product_ID AS M_ProductBOM_ID, 
			CASE WHEN bl.IsQtyPercentage = 'N' THEN bl.QtyBOM ELSE bl.QtyBatch / 100 END AS BomQty , p.IsBOM 
		FROM PP_PRODUCT_BOM b
		INNER JOIN M_PRODUCT p ON (p.M_Product_ID=b.M_Product_ID)
		INNER JOIN PP_PRODUCT_BOMLINE bl ON (bl.PP_Product_BOM_ID=b.PP_Product_BOM_ID)
		WHERE b.M_Product_ID = p_Product_ID
		LOOP
			v_ProductPrice := Bompricelimit (bom.M_ProductBOM_ID, p_PriceList_Version_ID);
			v_Price := v_Price + (bom.BOMQty * v_ProductPrice);
		END LOOP;
	END IF;
	--
	RETURN v_Price;
END;
$BODY$
  LANGUAGE 'plpgsql' ;</RollbackStatement>
    </Step>
    <Step DBType="Postgres" Parse="N" SeqNo="30" StepType="SQL">
      <SQLStatement>CREATE OR REPLACE FUNCTION Bompricelist
(
	Product_ID 		numeric,
	PriceList_Version_ID	numeric,
	p_ProductBOM_id	numeric
)
RETURNS numeric
AS
$BODY$
DECLARE
	v_Price		numeric;
	v_ProductPrice	numeric;
	bom 		record;
BEGIN
	--	Try to get price from pricelist directly
	SELECT	COALESCE (SUM(PriceList), 0)
	INTO	v_Price
   	FROM	M_PRODUCTPRICE
	WHERE M_PriceList_Version_ID=PriceList_Version_ID AND M_Product_ID=Product_ID;
--	DBMS_OUTPUT.PUT_LINE('Price=' || Price);

	--	No Price - Check if BOM
	IF (v_Price = 0) THEN
		FOR bom IN 
		--Get BOM Product info
		SELECT bl.M_Product_ID AS M_ProductBOM_ID, CASE WHEN bl.IsQtyPercentage = 'N' THEN bl.QtyBOM ELSE bl.QtyBatch / 100 END AS BomQty , p.IsBOM 
		FROM PP_PRODUCT_BOM b
				INNER JOIN M_PRODUCT p ON (p.M_Product_ID=b.M_Product_ID)
				INNER JOIN PP_PRODUCT_BOMLINE bl ON (bl.PP_Product_BOM_ID=b.PP_Product_BOM_ID)
		WHERE b.M_Product_ID = Product_ID  
		AND ((b.PP_Product_BOM_ID = p_Productbom_ID AND p_Productbom_ID !=0) OR (p_Productbom_ID =0 AND b.IsDefault = 'Y'))
		LOOP
			v_ProductPrice := Bompricelist (bom.M_ProductBOM_ID, PriceList_Version_ID);
			v_Price := v_Price + (bom.BOMQty * v_ProductPrice);
		--	DBMS_OUTPUT.PUT_LINE('Qry=' || bom.BOMQty || ' @ ' || v_ProductPrice || ', Price=' || v_Price);
		END LOOP;	--	BOM
	END IF;
	--
	RETURN v_Price;
END;
$BODY$
  LANGUAGE 'plpgsql' ;</SQLStatement>
      <RollbackStatement>DROP FUNCTION Bompricelist(numeric, numeric, numeric);</RollbackStatement>
    </Step>
    <Step DBType="Postgres" Parse="N" SeqNo="40" StepType="SQL">
      <SQLStatement>CREATE OR REPLACE FUNCTION Bompricelist
(
	Product_ID 		numeric,
	PriceList_Version_ID	numeric
)
RETURNS numeric
AS
$BODY$
BEGIN
	RETURN Bompricelist(Product_ID, PriceList_Version_ID, 0);
END;
$BODY$
  LANGUAGE 'plpgsql' ;</SQLStatement>
      <RollbackStatement>CREATE OR REPLACE FUNCTION Bompricelist
(
	Product_ID 		numeric,
	PriceList_Version_ID	numeric
)
RETURNS numeric
AS
$BODY$
DECLARE
	v_Price		numeric;
	v_ProductPrice	numeric;
	bom 		record;
BEGIN
	--	Try to get price from pricelist directly
	SELECT	COALESCE (SUM(PriceList), 0)
	INTO	v_Price
   	FROM	M_PRODUCTPRICE
	WHERE M_PriceList_Version_ID=PriceList_Version_ID AND M_Product_ID=Product_ID;
--	DBMS_OUTPUT.PUT_LINE('Price=' || Price);

	--	No Price - Check if BOM
	IF (v_Price = 0) THEN
		FOR bom IN 
		--Get BOM Product info
		SELECT bl.M_Product_ID AS M_ProductBOM_ID, CASE WHEN bl.IsQtyPercentage = 'N' THEN bl.QtyBOM ELSE bl.QtyBatch / 100 END AS BomQty , p.IsBOM 
		FROM PP_PRODUCT_BOM b
				INNER JOIN M_PRODUCT p ON (p.M_Product_ID=b.M_Product_ID)
				INNER JOIN PP_PRODUCT_BOMLINE bl ON (bl.PP_Product_BOM_ID=b.PP_Product_BOM_ID)
		WHERE b.M_Product_ID = Product_ID  
		LOOP
			v_ProductPrice := Bompricelist (bom.M_ProductBOM_ID, PriceList_Version_ID);
			v_Price := v_Price + (bom.BOMQty * v_ProductPrice);
		--	DBMS_OUTPUT.PUT_LINE('Qry=' || bom.BOMQty || ' @ ' || v_ProductPrice || ', Price=' || v_Price);
		END LOOP;	--	BOM
	END IF;
	--
	RETURN v_Price;
END;
$BODY$
  LANGUAGE 'plpgsql' ;</RollbackStatement>
    </Step>
    <Step DBType="Postgres" Parse="N" SeqNo="50" StepType="SQL">
      <SQLStatement>CREATE OR REPLACE FUNCTION Bompricestd
(
	Product_ID 		numeric,
	PriceList_Version_ID	numeric,
	p_productbom_id numeric
)
RETURNS numeric
AS
$BODY$
DECLARE
	v_Price		numeric;
	v_ProductPrice	numeric;
	bom		record;
BEGIN
	--	Try to get price from pricelist directly
	SELECT	COALESCE(SUM(PriceStd), 0)
	INTO	v_Price
   	FROM	M_PRODUCTPRICE
	WHERE M_PriceList_Version_ID=PriceList_Version_ID AND M_Product_ID=Product_ID;
--	DBMS_OUTPUT.PUT_LINE('Price=' || v_Price);

	--	No Price - Check if BOM
	IF (v_Price = 0) THEN
		FOR bom IN 		--	Get BOM Product info
		SELECT bl.M_Product_ID AS M_ProductBOM_ID, CASE WHEN bl.IsQtyPercentage = 'N' THEN bl.QtyBOM ELSE bl.QtyBatch / 100 END AS BomQty , p.IsBOM 
		FROM PP_PRODUCT_BOM b
				INNER JOIN M_PRODUCT p ON (p.M_Product_ID=b.M_Product_ID)
				INNER JOIN PP_PRODUCT_BOMLINE bl ON (bl.PP_Product_BOM_ID=b.PP_Product_BOM_ID)
		WHERE b.M_Product_ID = Product_ID  
		AND ((b.PP_Product_BOM_ID = p_Productbom_ID AND p_Productbom_ID !=0) OR (p_Productbom_ID =0 AND b.IsDefault = 'Y'))
		LOOP
			v_ProductPrice := Bompricestd (bom.M_ProductBOM_ID, PriceList_Version_ID);
			v_Price := v_Price + (bom.BOMQty * v_ProductPrice);
		--	DBMS_OUTPUT.PUT_LINE('Price=' || v_Price);
		END LOOP;	--	BOM
	END IF;
	--
	RETURN v_Price;
END;
$BODY$
  LANGUAGE 'plpgsql' ;</SQLStatement>
      <RollbackStatement>DROP FUNCTION Bompricestd(numeric, numeric, numeric);</RollbackStatement>
    </Step>
    <Step DBType="Postgres" Parse="N" SeqNo="60" StepType="SQL">
      <SQLStatement>CREATE OR REPLACE FUNCTION Bompricestd
(
	Product_ID 		numeric,
	PriceList_Version_ID	numeric
)
RETURNS numeric
AS
$BODY$
BEGIN
	RETURN Bompricestd(Product_ID, PriceList_Version_ID, 0);
END;
$BODY$
  LANGUAGE 'plpgsql' ;
</SQLStatement>
      <RollbackStatement>CREATE OR REPLACE FUNCTION Bompricestd
(
	Product_ID 		numeric,
	PriceList_Version_ID	numeric
)
RETURNS numeric
AS
$BODY$
DECLARE
	v_Price		numeric;
	v_ProductPrice	numeric;
	bom		record;
BEGIN
	--	Try to get price from pricelist directly
	SELECT	COALESCE(SUM(PriceStd), 0)
	INTO	v_Price
   	FROM	M_PRODUCTPRICE
	WHERE M_PriceList_Version_ID=PriceList_Version_ID AND M_Product_ID=Product_ID;
--	DBMS_OUTPUT.PUT_LINE('Price=' || v_Price);

	--	No Price - Check if BOM
	IF (v_Price = 0) THEN
		FOR bom IN 		--	Get BOM Product info
		SELECT bl.M_Product_ID AS M_ProductBOM_ID, CASE WHEN bl.IsQtyPercentage = 'N' THEN bl.QtyBOM ELSE bl.QtyBatch / 100 END AS BomQty , p.IsBOM 
		FROM PP_PRODUCT_BOM b
				INNER JOIN M_PRODUCT p ON (p.M_Product_ID=b.M_Product_ID)
				INNER JOIN PP_PRODUCT_BOMLINE bl ON (bl.PP_Product_BOM_ID=b.PP_Product_BOM_ID)
		WHERE b.M_Product_ID = Product_ID  
		LOOP
			v_ProductPrice := Bompricestd (bom.M_ProductBOM_ID, PriceList_Version_ID);
			v_Price := v_Price + (bom.BOMQty * v_ProductPrice);
		--	DBMS_OUTPUT.PUT_LINE('Price=' || v_Price);
		END LOOP;	--	BOM
	END IF;
	--
	RETURN v_Price;
END;
$BODY$
  LANGUAGE 'plpgsql' ;
</RollbackStatement>
    </Step>
  </Migration>
</Migrations>
